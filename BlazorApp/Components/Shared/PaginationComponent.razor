@* This allows the component to be generic, meaning it can work with any data type (TItem) *@
@typeparam TItem 


<div class="container-sm py-4">
	@ItemContent(Items.ElementAt(selectedIndex))
</div>

<nav aria-label="Pagination functionality">
	<ul class="pagination pagination-lg justify-content-center">
		<li class="page-item @(previousDisabled ? "disabled" : "")" disabled="@previousDisabled">
			<a class="page-link" @onclick="@(() => SetIndex(0))">
				<span>⏪</span>
			</a>
		</li>
		<li class="page-item @(previousDisabled ? "disabled" : "")" disabled="@previousDisabled">
			<a class="page-link" @onclick="DecrementIndex"><span>⬅️</span></a>
		</li>

		@foreach ((int index, TItem item) in Items.Select((item, index) => (index, item)))
		{
			var isActive = index == selectedIndex;
			<li class="page-item @(isActive ? "active" :"")">
				<a class="page-link" @onclick="@(() => SetIndex(index))">
					@(index + 1)
				</a>
			</li>
		}
		<li class="page-item @(nextDisabled ? "disabled" : "")" disabled="@nextDisabled">
			<a class="page-link" @onclick="IncrementIndex"><span>➡️</span></a>
		</li>
		<li class="page-item @(nextDisabled ? "disabled" : "")" disabled="@nextDisabled">
			<a class="page-link" @onclick="@(() => SetIndex(Items.Count - 1))">
				<span>⏩</span>
			</a>
		</li>
	</ul>
</nav>

@code {
	// This is a collection of data(IEnumerable, List) passed into the component.
	[Parameter, EditorRequired]
	public required List<TItem> Items { get; set; }

	[Parameter, EditorRequired]
	public required RenderFragment<TItem> ItemContent { get; set; }

	[Parameter, EditorRequired]
	public required Func<TItem, MarkupString> ItemLabel { get; set; }

	private int selectedIndex;

	bool previousDisabled => selectedIndex == 0;
	bool nextDisabled => selectedIndex == Items.Count - 1;

	private void IncrementIndex() => selectedIndex++;
	private void DecrementIndex() => selectedIndex--;
	private void SetIndex(int index) => selectedIndex = index;

	protected override void OnInitialized() => selectedIndex = Items.Count - 1;
}
