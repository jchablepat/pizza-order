@page "/"
@using System.Diagnostics
@using BlazorApp.Components.Models
@using BlazorApp.Components.Shared
@using BlazorApp.Services
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderState OrderState
@inject IJSRuntime JS
@rendermode InteractiveServer

<div class="main">
    <ul class="pizza-cards">
		@foreach (var special in specials ?? new())
		{
			<li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" 
			    style="background-image: url('@special.ImageUrl')">
				<div class="pizza-info">
					<span class="title">@special.Name</span>
					@special.Description
					<span class="price">@special.GetFormattedBasePrice()</span>
				</div>
			</li>
		}
    </ul>
</div>

@if (OrderState.ShowingConfigureDialog)
{
	<ConfigurePizzaDialog 
		Pizza="OrderState.ConfiguringPizza"
		OnCancel="OrderState.CancelConfigurePizzaDialog"
		OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

<div class="sidebar @(order.Pizzas.Any() ? "with-total" : "")">
	@if (order.Pizzas.Any())
	{
		<div class="order-contents">
			<h2>Your order</h2>

			@foreach (var configuredPizza in order.Pizzas)
			{
				<div class="cart-item">
					<div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
					<div class="item-price">
						@configuredPizza.GetFormattedTotalPrice()
					</div>
					<button type="button" class="close text-danger" title="Eliminar" aria-label="Close" @onclick="@(async () => await RemovePizzaConfirmation(configuredPizza))">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
			}
		</div>
	}
	else
	{
		<div class="empty-cart">Elige una pizza<br> para empezar</div>
	}

	<div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
		Total:
		<span class="total-price">@order.GetFormattedTotalPrice()</span>
		<a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
			Ordenar >
		</a>
	</div>
</div>

@code {
    List<PizzaSpecial>? specials = [];
    Order order => OrderState.Order;

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>($"{NavigationManager.BaseUri}api/specials");
    }

    async Task RemovePizzaConfirmation(Pizza removePizza)
    {
	    var messageParams = new {
		    title = "Eliminar Pizza",
		    text = $"""¿Desea eliminar la Pizza "{removePizza.Special!.Name}" de su orden?""",
		    icon = "warning",
		    buttons = new {
				abort = new { text = "No, dejarlo en mi pedido", value = false },
				confirm = new { text = "Sí, quitar la pizza", value = true }
		    },
		    dangerMode = true
	    };

		try {
			var result = await JS.InvokeAsync<bool>("swal", messageParams);

			if (result) {
				OrderState.RemoveConfiguredPizza(removePizza);
			}
		} catch(Exception ex) {
			Debug.WriteLine(ex.Message);
		}
    }
}